<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog of radical</title>
  <subtitle>程序员，学生</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://hustjs.github.io/"/>
  <updated>2016-08-23T19:56:58.984Z</updated>
  <id>http://hustjs.github.io/</id>
  
  <author>
    <name>radical</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Activity Launchmode你需要知道的一切</title>
    <link href="http://hustjs.github.io/2016/08/24/Activity-Launchmode/"/>
    <id>http://hustjs.github.io/2016/08/24/Activity-Launchmode/</id>
    <published>2016-08-23T19:38:57.000Z</published>
    <updated>2016-08-23T19:56:58.984Z</updated>
    
    <content type="html"><![CDATA[<p>#Activity Launchmode你需要知道的一切<br><a id="more"></a>，</p>
<h1 id="四种启动模式"><a href="#四种启动模式" class="headerlink" title="四种启动模式"></a>四种启动模式</h1><p>2种定义方式:1 使用manifest文件  2 使用intent flag</p>
<h2 id="manifest方式：设置launchMode属性"><a href="#manifest方式：设置launchMode属性" class="headerlink" title="manifest方式：设置launchMode属性"></a>manifest方式：设置launchMode属性</h2><p>i<br>“standard”（默认模式）<br>    默认。系统在启动 Activity 的任务中创建 Activity 的新实例并向其传送 Intent。Activity 可以多次实例化，而每个实例均可属于不同的任务，并且一个任务可以拥有多个实例。<br>“singleTop”<br>    如果当前任务的顶部已存在 Activity 的一个实例，则系统会通过调用该实例的 onNewIntent() 方法向其传送 Intent，而不是创建 Activity 的新实例。Activity 可以多次实例化，而每个实例均可属于不同的任务，并且一个任务可以拥有多个实例（但前提是位于返回栈顶部的 Activity 并不是 Activity 的现有实例）。</p>
<pre><code>例如，假设任务的返回栈包含根 Activity A 以及 Activity B、C 和位于顶部的 D（堆栈是 A-B-C-D；D 位于顶部）。收到针对 D 类 Activity 的 Intent。如果 D 具有默认的 &quot;standard&quot; 启动模式，则会启动该类的新实例，且堆栈会变成 A-B-C-D-D。但是，如果 D 的启动模式是 &quot;singleTop&quot;，则 D 的现有实例会通过 onNewIntent() 接收 Intent，因为它位于堆栈的顶部；而堆栈仍为 A-B-C-D。但是，如果收到针对 A 类 Activity 的 Intent，则会向堆栈添加 B 的新实例，即便其启动模式为 &quot;singleTop&quot; 也是如此。

注：为某个 Activity 创建新实例时，用户可以按“返回”按钮返回到前一个 Activity。 但是，当 Activity 的现有实例处理新 Intent 时，则在新 Intent 到达 onNewIntent() 之前，用户无法按“返回”按钮返回到 Activity 的状态。
</code></pre><p>“singleTask”<br>    系统创建新任务并实例化位于新任务底部的 Activity。但是，如果该 Activity 的一个实例已存在于一个单独的任务中，则系统会通过调用现有实例的 onNewIntent() 方法向其传送 Intent，而不是创建新实例。一次只能存在 Activity 的一个实例。</p>
<pre><code>注：尽管 Activity 在新任务中启动，但是用户按“返回”按钮仍会返回到前一个 Activity。 
</code></pre><p>“singleInstance”。<br>    与 “singleTask” 相同，只是系统不会将任何其他 Activity 启动到包含实例的任务中。该 Activity 始终是其任务唯一仅有的成员；由此 Activity 启动的任何 Activity 均在单独的任务中打开。</p>
<h2 id="使用-Intent-标志"><a href="#使用-Intent-标志" class="headerlink" title="使用 Intent 标志"></a>使用 Intent 标志</h2><p>启动 Activity 时，您可以通过在传递给 startActivity() 的 Intent 中加入相应的标志，修改 Activity 与其任务的默认关联方式。可用于修改默认行为的标志包括：</p>
<p>FLAG_ACTIVITY_NEW_TASK<br>    在新任务中启动 Activity。如果已为正在启动的 Activity 运行任务，则该任务会转到前台并恢复其最后状态，同时 Activity 会在 onNewIntent() 中收到新 Intent。</p>
<pre><code>正如前文所述，这会产生与 &quot;singleTask&quot; launchMode 值相同的行为。
</code></pre><p>FLAG_ACTIVITY_SINGLE_TOP<br>    如果正在启动的 Activity 是当前 Activity（位于返回栈的顶部），则 现有实例会接收对 onNewIntent() 的调用，而不是创建 Activity 的新实例。</p>
<pre><code>正如前文所述，这会产生与 &quot;singleTop&quot; launchMode 值相同的行为。
</code></pre><p>FLAG_ACTIVITY_CLEAR_TOP<br>    如果正在启动的 Activity 已在当前任务中运行，则会销毁当前任务顶部的所有 Activity，并通过 onNewIntent() 将此 Intent 传递给 Activity 已恢复的实例（现在位于顶部），而不是启动该 Activity 的新实例。</p>
<pre><code>产生这种行为的 launchMode 属性没有值。

FLAG_ACTIVITY_CLEAR_TOP 通常与 FLAG_ACTIVITY_NEW_TASK 结合使用。一起使用时，通过这些标志，可以找到其他任务中的现有 Activity，并将其放入可从中响应 Intent 的位置。

注：如果指定 Activity 的启动模式为 &quot;standard&quot;，则该 Activity 也会从堆栈中删除，并在其位置启动一个新实例，以便处理传入的 Intent。 这是因为当启动模式为 &quot;standard&quot; 时，将始终为新 Intent 创建新实例。
</code></pre><h1 id="manifest属性关联及清空返回栈属性"><a href="#manifest属性关联及清空返回栈属性" class="headerlink" title="manifest属性关联及清空返回栈属性"></a>manifest属性关联及清空返回栈属性</h1><h2 id="关联属性taskAffinity"><a href="#关联属性taskAffinity" class="headerlink" title="关联属性taskAffinity"></a>关联属性taskAffinity</h2><pre><code>在两种情况下，关联会起作用：

启动 Activity 的 Intent 包含 FLAG_ACTIVITY_NEW_TASK 标志。

默认情况下，新 Activity 会启动到调用 startActivity() 的 Activity 任务中。它将推入与调用方相同的返回栈。 但是，如果传递给 startActivity() 的 Intent 包含 FLAG_ACTIVITY_NEW_TASK 标志，则系统会寻找其他任务来储存新 Activity。这通常是新任务，但未做强制要求。 如果现有任务与新 Activity 具有相同关联，则会将 Activity 启动到该任务中。 否则，将开始新任务。

如果此标志导致 Activity 开始新任务，且用户按“主页”按钮离开，则必须为用户提供导航回任务的方式。 有些实体（如通知管理器）始终在外部任务中启动 Activity，而从不作为其自身的一部分启动 Activity，因此它们始终将 FLAG_ACTIVITY_NEW_TASK 放入传递给 startActivity() 的 Intent 中。请注意，如果 Activity 能够由可以使用此标志的外部实体调用，则用户可以通过独立方式返回到启动的任务，例如，使用启动器图标（任务的根 Activity 具有 CATEGORY_LAUNCHER Intent 过滤器；请参阅下面的启动任务部分）。
Activity 将其 allowTaskReparenting 属性设置为 &quot;true&quot;。

在这种情况下，Activity 可以从其启动的任务移动到与其具有关联的任务（如果该任务出现在前台）。

例如，假设将报告所选城市天气状况的 Activity 定义为旅行应用的一部分。 它与同一应用中的其他 Activity 具有相同的关联（默认应用关联），并允许利用此属性重定父级。当您的一个 Activity 启动天气预报 Activity 时，它最初所属的任务与您的 Activity 相同。 但是，当旅行应用的任务出现在前台时，系统会将天气预报 Activity 重新分配给该任务并显示在其中。

提示：如果从用户的角度来看，一个 .apk 文件包含多个“应用”，则您可能需要使用 taskAffinity 属性将不同关联分配给与每个“应用”相关的 Activity。
</code></pre><h2 id="清空返回栈属性"><a href="#清空返回栈属性" class="headerlink" title="清空返回栈属性"></a>清空返回栈属性</h2><p>alwaysRetainTaskState<br>    如果在任务的根 Activity 中将此属性设置为 “true”，则不会发生刚才所述的默认行为。即使在很长一段时间后，任务仍将所有 Activity 保留在其堆栈中。<br>clearTaskOnLaunch<br>    如果在任务的根 Activity 中将此属性设置为 “true”，则每当用户离开任务然后返回时，系统都会将堆栈清除到只剩下根 Activity。 换而言之，它与 alwaysRetainTaskState 正好相反。 即使只离开任务片刻时间，用户也始终会返回到任务的初始状态。<br>finishOnTaskLaunch<br>    此属性类似于 clearTaskOnLaunch，但它对单个 Activity 起作用，而非整个任务。 此外，它还有可能会导致任何 Activity 停止，包括根 Activity。 设置为 “true” 时，Activity 仍是任务的一部分，但是仅限于当前会话。如果用户离开然后返回任务，则任务将不复存在。 </p>
<p>下面深入介绍singleTask和singleInstance<br>参考链接：<a href="http://blog.csdn.net/zhangjg_blog/article/details/10923643" target="_blank" rel="external">http://blog.csdn.net/zhangjg_blog/article/details/10923643</a></p>
<h1 id="singleTask精讲"><a href="#singleTask精讲" class="headerlink" title="singleTask精讲"></a>singleTask精讲</h1><p>启动launchMode设为singleTask的activity的过程:<br>1发现启动模式为singleTask，设启动标志为FLAG_ACTIVITY_NEW_TASK；<br>2获得（检测）该activity的taskaffinity；<br>3检测是否存在affinity的task；<br>4若存在这样的task则检索是否存在该activity的实例，若存在将该activity置于栈顶（清空任务栈内上方所以activity），不存在则在栈顶创建这个Activity；<br>5若不存在这样的task，在创建此affinity的新task，并在新task内启动该activity</p>
<p>重要特性归纳：<br>1任务（Task）不仅可以跨应用（Application），还可以跨进程（Process）<br>2在同一个任务中具有唯一性<br>3启动一个singleTask的Activity实例时，如果系统中已经存在这样一个实例，就会将这个实例调度到任务栈的栈顶，并清除它当前所在任务中位于它上面的所有的activity。</p>
<h1 id="singleInstance精讲"><a href="#singleInstance精讲" class="headerlink" title="singleInstance精讲"></a>singleInstance精讲</h1><p> 1 以singleInstance模式启动的Activity具有全局唯一性，即整个系统中只会存在一个这样的实例<br> 2 以singleInstance模式启动的Activity具有独占性，即它会独自占用一个任务，被他开启的任何activity都会运行在其他任务中（官方文档上的描述为，singleInstance模式的Activity不允许其他Activity和它共存在一个任务中）<br> 3 被singleInstance模式的Activity开启的其他activity，能够开启一个新任务，但不一定开启新的任务，也可能在已有的一个任务中开启</p>
<h1 id="生命周期相关"><a href="#生命周期相关" class="headerlink" title="生命周期相关"></a>生命周期相关</h1><p>以MainActivity 启动SecondActivity为例，生命周期过程为：M onCreate-&gt;M onStart -&gt;onResume-&gt;在MainActivity中启动SecondActivity-&gt;M onPause-&gt;S onCreate -&gt;<br>S onStart-&gt;S onResume -&gt;M onStop -按下back键-&gt; S onPause -&gt;S onStop-&gt;S onDestroy<br>-&gt; (M onRestart-&gt; M onStart-&gt; )M onResume-&gt; 再次按下back键-&gt; M onPause -&gt; M onStop -&gt;M onDestroy</p>
<h1 id="优秀文章延伸阅读："><a href="#优秀文章延伸阅读：" class="headerlink" title="优秀文章延伸阅读："></a>优秀文章延伸阅读：</h1><p><a href="https://developer.android.com/guide/components/tasks-and-back-stack.html" target="_blank" rel="external">https://developer.android.com/guide/components/tasks-and-back-stack.html</a><br><a href="http://blog.csdn.net/guolin_blog/article/details/41087993" target="_blank" rel="external">http://blog.csdn.net/guolin_blog/article/details/41087993</a><br><a href="http://blog.csdn.net/zhangjg_blog/article/details/10923643" target="_blank" rel="external">http://blog.csdn.net/zhangjg_blog/article/details/10923643</a><br><a href="http://blog.csdn.net/luoshengyang/article/details/6714543" target="_blank" rel="external">http://blog.csdn.net/luoshengyang/article/details/6714543</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;#Activity Launchmode你需要知道的一切&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Github Pages + Hexo打造私人博客</title>
    <link href="http://hustjs.github.io/2016/08/24/my-first-post/"/>
    <id>http://hustjs.github.io/2016/08/24/my-first-post/</id>
    <published>2016-08-23T17:27:17.000Z</published>
    <updated>2016-08-23T17:30:13.266Z</updated>
    
    <content type="html"><![CDATA[<p>#这里是正文，用markdown写，你可以选择写一段显示在首页的简介后，加上<br><a id="more"></a>，在<!--more-->之前的内容会显示在首页，之后的内容会被隐藏，当游客点击Read more才能看到。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;#这里是正文，用markdown写，你可以选择写一段显示在首页的简介后，加上&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://hustjs.github.io/2016/08/24/hello-world/"/>
    <id>http://hustjs.github.io/2016/08/24/hello-world/</id>
    <published>2016-08-23T16:57:26.858Z</published>
    <updated>2016-08-23T16:57:26.858Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
